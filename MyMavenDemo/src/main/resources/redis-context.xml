<beans xmlns="http://www.springframework.org/schema/beans" xmlns:redis="http://www.springframework.org/schema/redis"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
      http://www.springframework.org/schema/beans 
      http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
      http://www.springframework.org/schema/tx 
      http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
      http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="minIdle" value="${redis.minIdle}" />
		<property name="maxIdle" value="${redis.maxIdle}" />
		<property name="maxTotal" value="${redis.maxActive}" />
		<property name="maxWaitMillis" value="${redis.maxWait}" />
		<property name="testOnBorrow" value="${redis.testOnBorrow}" />
		<!-- 最大空闲连接数 -->
<!--         <property name="maxIdle" value="${redis.maxIdle}" /> -->
        <!-- 最小空闲连接数 -->
<!--         <property name="minIdle" value="${redis.minIdle}" /> -->
        <!-- 在获取连接的时候检查有效性 -->
<!--         <property name="testOnBorrow" value="${redis.testOnBorrow}" /> -->
        <!-- return 一个jedis实例给pool时，是否检查连接可用性 （ping()） -->
<!--         <property name="testOnReturn" value="${redis.adapter.testOnReturn}" /> -->
        <!-- idle状态监测用异步线程evict进行检查， -->
<!--         <property name="testWhileIdle" value="${redis.adapter.testWhileIdle}" /> -->
        <!-- 一次最多evict的pool里的jedis实例个数 -->
<!--         <property name="numTestsPerEvictionRun" value="${redis.adapter.numTestsPerEvictionRun}" /> -->
        <!-- test idle 线程的时间间隔 -->
<!--         <property name="timeBetweenEvictionRunsMillis" value="${redis.adapter.timeBetweenEvictionRunsMillis}" /> -->
	</bean>

	<bean id="jedisConnFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="${redis.host}" />
		<property name="port" value="${redis.port}" />
		<property name="password" value="${redis.password}" />
		<property name="usePool" value="true" />
		<property name="poolConfig" ref="poolConfig" />
	</bean>
<!-- ********************redis集群配置开始********************* -->
<!-- 	<bean id="sentinelConfig" class="org.springframework.data.redis.connection.RedisSentinelConfiguration"> -->
		<!-- master名称 sentinel.conf里面配置的主节点名称 -->
<!-- 		<constructor-arg name="master" value="${redis.adapter.masterName}" /> -->
		<!-- sentinel的ip和端口列表 -->
<!-- 		<constructor-arg name="sentinelHostAndPorts"> -->
<!-- 			<set> -->
<!-- 				<value>${redis.adapter.sentinel1}</value> -->
<!-- 				<value>${redis.adapter.sentinel2}</value> -->
<!-- 				<value>${redis.adapter.sentinel3}</value> -->
<!-- 			</set> -->
<!-- 		</constructor-arg> -->
<!-- 	</bean> -->

<!-- 	<bean id="jedisConnFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"> -->
<!-- 		<constructor-arg ref="sentinelConfig" /> -->
<!--         <constructor-arg ref="poolConfig" /> -->
<!-- 	</bean> -->
<!-- ********************redis集群配置完毕********************* -->

	<!-- redis template definition -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="jedisConnFactory" />
		<property name="keySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="valueSerializer">
			<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>
		<property name="hashKeySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="hashValueSerializer">
			<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>
	</bean>

	<!-- <bean id="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager" c:template-ref="redisTemplate" 
		/> -->
</beans>