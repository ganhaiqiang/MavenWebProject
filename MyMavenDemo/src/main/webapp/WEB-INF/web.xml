<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
	<display-name>MyMavenDemo</display-name>
	<welcome-file-list>
		<welcome-file>index.jsp</welcome-file>
	</welcome-file-list>

	<context-param>
		<param-name>webAppRootKey</param-name>
		<param-value>project.root</param-value><!-- 用于定位log文件输出位置在web应用根目录下，log4j配置文件中写输出位置：log4j.appender.FILE.File=${project.root}/logs/project.log -->
	</context-param>
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>classpath:log4j.properties</param-value><!-- 载入log4j配置文件 -->
	</context-param>
	<context-param>
		<param-name>log4jRefreshInterval</param-name>
		<param-value>60000</param-value><!--Spring刷新Log4j配置文件的间隔60秒,单位为millisecond -->
	</context-param>

	<listener>
		<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener>

	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:spring-beans.xml</param-value>
	</context-param>
	<servlet>
		<servlet-name>spring</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:spring-mvc.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>spring</servlet-name>
		<url-pattern>/service/*</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>spring</servlet-name>
		<url-pattern>/api/*</url-pattern>
	</servlet-mapping>

	<listener>
		<!-- <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class> -->
		<listener-class>com.demo.listener.ContextListener</listener-class>
	</listener>

	<!-- redis分布式Session共享Filter -->
	<!-- <filter> -->
	<!-- <filter-name>springSessionRepositoryFilter</filter-name> -->
	<!-- <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class> -->
	<!-- </filter> -->
	<!-- <filter-mapping> -->
	<!-- <filter-name>springSessionRepositoryFilter</filter-name> -->
	<!-- <url-pattern>/*</url-pattern> -->
	<!-- <dispatcher>REQUEST</dispatcher> -->
	<!-- <dispatcher>ERROR</dispatcher> -->
	<!-- </filter-mapping> -->

	<!-- <filter> -->
	<!-- <filter-name>XSS Filter</filter-name> -->
	<!-- <filter-class>com.demo.filter.XssFilter</filter-class> -->
	<!-- </filter> -->
	<!-- <filter-mapping> -->
	<!-- <filter-name>XSS Filter</filter-name> -->
	<!-- <url-pattern>/*</url-pattern> -->
	<!-- </filter-mapping> -->

	<filter>
		<filter-name>characterEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>characterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- <listener> <listener-class>com.demo.listener.ContextAttributeListener</listener-class> </listener> -->

	<!-- <filter> -->
	<!-- <display-name>DemoFilter</display-name> -->
	<!-- <filter-name>DemoFilter</filter-name> -->
	<!-- <filter-class>com.demo.filter.DemoFilter</filter-class> -->
	<!-- </filter> -->
	<!-- <filter-mapping> -->
	<!-- <filter-name>DemoFilter</filter-name> -->
	<!-- <url-pattern>/*</url-pattern> -->
	<!-- </filter-mapping> -->
	<!-- 用于单点退出，该过滤器用于实现单点登出功能，可选配置 -->
	<!-- <listener> -->
	<!-- <listener-class>org.jasig.cas.client.session.SingleSignOutHttpSessionListener</listener-class> -->
	<!-- </listener> -->

	<!-- 该过滤器用于实现单点登出功能，可选配置。 -->
	<!-- <filter> -->
	<!-- <filter-name>CAS Single Sign Out Filter</filter-name> -->
	<!-- <filter-class>org.jasig.cas.client.session.SingleSignOutFilter</filter-class> -->
	<!-- </filter> -->

	<!-- <filter-mapping> -->
	<!-- <filter-name>CAS Single Sign Out Filter</filter-name> -->
	<!-- <url-pattern>/*</url-pattern> -->
	<!-- </filter-mapping> -->

	<!-- 该过滤器负责用户的认证工作，必须启用它 -->
	<!-- <filter> -->
	<!-- <filter-name>CASFilter</filter-name> -->
	<!-- <filter-class>org.jasig.cas.client.authentication.AuthenticationFilter</filter-class> -->
	<!-- <filter-class>com.cas.client.filter.MyAuthenticationFilter</filter-class> -->

	<!-- <init-param> -->
	<!-- cas服务器登录地址 -->
	<!-- <param-name>casServerLoginUrl</param-name> -->
	<!-- <param-value>${casServerLoginUrl}</param-value> -->
	<!-- </init-param> -->

	<!-- <init-param> -->
	<!-- 这里的web服务端的地址 -->
	<!-- <param-name>serverName</param-name> -->
	<!-- <param-value>${serverName}</param-value> -->
	<!-- </init-param> -->
	<!-- </filter> -->
	<!-- <filter-mapping> -->
	<!-- <filter-name>CASFilter</filter-name> -->
	<!-- <url-pattern>/*</url-pattern> -->
	<!-- </filter-mapping> -->

	<!-- 该过滤器负责对Ticket的校验工作，必须启用它 -->
	<!-- <filter> -->
	<!-- <filter-name>CAS Validation Filter</filter-name> -->
	<!-- <filter-class> -->
	<!-- com.cas.client.filter.MyTicketValidationFilter -->
	<!-- </filter-class> -->
	<!-- <filter-class> -->
	<!-- org.jasig.cas.client.validation.Cas20ProxyReceivingTicketValidationFilter -->
	<!-- </filter-class> -->
	<!-- <init-param> -->
	<!-- <param-name>casServerUrlPrefix</param-name> -->
	<!-- <param-value>${casServerUrlPrefix}</param-value> -->
	<!-- </init-param> -->
	<!-- <init-param> -->
	<!-- <param-name>serverName</param-name> -->
	<!-- <param-value>${serverName}</param-value> -->
	<!-- </init-param> -->
	<!-- </filter> -->

	<!-- <filter-mapping> -->
	<!-- <filter-name>CAS Validation Filter</filter-name> -->
	<!-- <url-pattern>/*</url-pattern> -->
	<!-- </filter-mapping> -->

	<!-- 该过滤器负责实现HttpServletRequest请求的包裹， 比如允许开发者通过HttpServletRequest的getRemoteUser()方法获得SSO登录用户的登录名，可选配置。 -->

	<!-- <filter> -->
	<!-- <filter-name>CAS HttpServletRequest Wrapper Filter</filter-name> -->
	<!-- <filter-class> -->
	<!-- org.jasig.cas.client.util.HttpServletRequestWrapperFilter -->
	<!-- </filter-class> -->
	<!-- </filter> -->

	<!-- <filter-mapping> -->
	<!-- <filter-name>CAS HttpServletRequest Wrapper Filter</filter-name> -->
	<!-- <url-pattern>/*</url-pattern> -->
	<!-- </filter-mapping> -->

	<!-- 该过滤器使得开发者可以通过org.jasig.cas.client.util.AssertionHolder来获取用户的登录名。 比如AssertionHolder.getAssertion().getPrincipal().getName()。 -->
	<!-- <filter> -->
	<!-- <filter-name>CAS Assertion Thread Local Filter</filter-name> -->
	<!-- <filter-class>org.jasig.cas.client.util.AssertionThreadLocalFilter</filter-class> -->
	<!-- </filter> -->

	<!-- <filter-mapping> -->
	<!-- <filter-name>CAS Assertion Thread Local Filter</filter-name> -->
	<!-- <url-pattern>/*</url-pattern> -->
	<!-- </filter-mapping> -->
	<!-- ======================== 单点登录结束 ======================== -->
</web-app>
